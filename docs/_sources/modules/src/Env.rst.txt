.. default-domain:: chpl

.. module:: Env
   :synopsis: The `Env` module provides procedures and an iterator

Env
===
**Usage**

.. code-block:: chapel

   use Env;


The `Env` module provides procedures and an iterator
which can help to manage environment variables.

.. method:: proc locale.setEnv(varName: string, varValue: string): int

   
   Set an environment variable to value.
   
   :arg varName: The name of the environment variable to set.
   :type varName: `string`
   
   :arg varValue: The new value of the environment variable.
   :type varValue: `string`
   
   :return: Returns 0 on success, -1 on error.
   :rtype: `int`
   

.. method:: proc locale.unsetEnv(varName: string): int

   
   Delete an environment variable.
   
   :arg varName: The name of the environment variable to delete.
   :type varName: `string`
   
   :return: Returns 0 on success, -1 on error.
   :rtype: `int`
   

.. method:: proc locale.getEnv(varName: string, defaultValue = ""): string

   
   Get the value of the environment variable, using default if not set.
   
   :arg varName: The name of the environment variable to retrieve.
   :type varName: `string`
   
   :arg defaultValue: The value to use if the variable does not exist.
   :type defaultValue: `string`
   
   :return: The value of the variable
   :rtype: `string`
   

.. itermethod:: iter locale.envs()

   
   Iterator to iterate over all defined environment variables
   
   :yields: A string containing a record of environment variable
   

.. data:: var envs: stringmapstring

   
   A map that stores state of envs
   
   .. note::
   
     The map is populated when the module is imported and does not reflect the realtime state.
     Also, this is not locale aware. Use methods if you need to run on multiple locales.
   
   

